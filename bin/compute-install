#!/bin/bash
set -e

if [[ "${1}" == "" ]]; then
    echo "error: no control node IP specified"
    echo "Usage is: ${0} CONTROL_NODE_IP INTERFACE_NAME [ESSID WPA_PASSPHRASE]"
    exit 1
fi
if [[ "${2}" == "" ]]; then
    echo "error: no network interface specified for configuration"
    echo "Usage is: ${0} CONTROL_NODE_IP INTERFACE_NAME [ESSID WPA_PASSPHRASE]"
    exit 1
fi
if [[ "${3}" != "" ]] && [[ "${4}" == "" ]]; then
    echo "error: ESSID specified without WPA passphrase"
    echo "Usage is: ${0} CONTROL_NODE_IP INTERFACE_NAME [ESSID WPA_PASSPHRASE]"
    exit 1
fi

CONTROLLER="${1}"
USERIFACE="${2}"
USERESSID="${3}"
USERWPAPW="${4}"

# fetch util funcs
if [[ ! -e "util.sh" ]]; then
    if ! curl --connect-timeout 10 -s -O "${1}/util.sh"; then
        echo "error: can't reach control node"
        echo "was given ip '${CONTROLLER}' -- please double check and/or check network connectivity"
        exit 1
    fi
fi
# and source
. ./util.sh


shownotice "Hardware clock check"
cat <<EOF
First, the system time (hardware clock) needs to be set to
UTC. The present time, according to the system clock, is: 

EOF
$(date '+$F $T')
UTC=affirmative("Is this correct")
if [[ "${UTC}" == "false" ]]; then
    echo "Please reboot and set the hardware clock."
    echo
    exit 1
fi

# set TZ
shownotice "Timezone configuration"
cat <<EOF
Please enter your timezone (e.g. America/Mexico_City). If you don't
know your TZ, google 'list of tz database time zones' and refer to the
resulting Wikipedia page.

EOF
until [[ "${TZ}" != "" ]]; do
    TZ=$(gutcheck "Enter your TZ")
    if [[ ! -e /usr/share/zoneinfo/${TZ} ]]; then
        echo "That TZ doesn't exist! Please check your TZ string."
        TZ=""
    fi
done
timedatectl set-timezone "${TZ}"
hwclock --systohc

# setup drive
shownotice "Drive configuration"
echo "These are the storage devices on this machine:"
echo
DRIVES=( /dev/sd? )
for I in $( seq 0 $((${#DRIVES[@]} - 1)) )
do
    PARTMAPRAW=$(parted -m -s "${DRIVES[${I}]}" print 2>/dev/null) || true
    readarray PARTMAP <<<"${PARTMAPRAW}"
    echo -n "${I} - ${PARTMAP[1]}"
    for J in $( seq 2 $(( ${#PARTMAP[@]} - 1 )) )
    do
        echo -n -e "\t${PARTMAP[${J}]}"
    done
    echo
done
DRIVENUM=$(gutcheck "Enter the number of the device to be used")
if [[ "${DRIVENUM}" = "" ]] && [[ ! ${+DRIVES[${DRIVENUM}]} ]]; then
    echo "Sorry, '${DRIVENUM}' is not a valid option. Terminating install."
    exit 1
fi
INSTALLDEVICE=${DRIVES[${DRIVENUM}]}
echo
echo "All data on ${INSTALLDEVICE} will be wiped."
if [[ $(affirmative "Are you sure") == "false" ]]; then
    echo "exiting"
    exit 1
fi
echo "OK. Preparing ${INSTALLDEVICE}"

# lay down new disk label
parted -s "${INSTALLDEVICE} mklabel gpt
# create EFI partition if we saw one earlier
parted -s -a none ${INSTALLDEVICE}" mkpart ESP fat32 1MiB 513MiB
parted -s "${INSTALLDEVICE}" name 1 "esp"
parted "${INSTALLDEVICE}" set 1 boot on
parted "${INSTALLDEVICE}" set 1 esp on

# lay down system partition
parted -s -a optimal "${INSTALLDEVICE}" mkpart primary ext4 513MiB 100%
parted -s "${INSTALLDEVICE}" name 2 "root"
echo -n "Settling partitions for 5 seconds... "
sleep 2
udevadm settle
partx -u "${INSTALLDEVICE}"
sleep 3
echo "OK"
# format and mount partitions
mkfs.ext4 -F /dev/disk/by-partlabel/root
mount /dev/disk/by-partlabel/root /mnt
mkdir /mnt/boot
mkfs.fat -F32 /dev/disk/by-partlabel/esp
mount /dev/disk/by-partlabel/esp /mnt/boot


# install base preqs
shownotice "Base install"
pacstrap /mnt base openssh wpa_supplicant openntpd base-devel lm_sensors
# generate /etc/fstab
genfstab -U /mnt >> /mnt/etc/fstab
# copy over resolf.conf so the system will have nameservice
rm -f /mnt/etc/resolv.conf
cp /etc/resolv.conf /mnt/etc/resolv.conf
# copy install mirrorlist to system
cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist

cat > /mnt/root/stage1.5 <<EOF
#!/bin/bash
set -e
CONTROLLER="${CONTROLLER}"
USERIFACE="${USERIFACE}"
USERESSID="${USERESSID}"
USERWPAPW="${USERWPAPW}"
# fetch util funcs
if [[ ! -e "util.sh" ]]; then
    curl --connect-timeout 10 -s -O "\${CONTROLLER}/util.sh"
fi
# and source
. ./util.sh

shownotice "Networking setup"
# set hostname
MACHNAME=\$(gutcheck "Please enter the machine's hostname" "node00")
echo \${MACHNAME} > /etc/hostname
echo
USERADDR=\$(gutcheck "\${USERIFACE}'s address (e.g. 192.168.1.7/24)")
echo
USERGW=\$(gutcheck "\${USERIFACE}'s gateway")
echo
USERDNS=\$(gutcheck "\${USERIFACE}'s DNS entries" "8.8.4.4 8.8.8.8")
rm -f /etc/systemd/network/*
cat > /etc/systemd/network/20-wired.network <<EOF2
[Match]
Name=\${USERIFACE}

[Network]
Address=\${USERADDR}
Gateway=\${USERGW}
EOF2
for dns in \${USERDNS}; do
    echo "DNS=\${dns}" >> /etc/systemd/network/20-wired.network
done
# if we have an essid, then all this needs to be wireless
if [[ "\${USERESSID}" != "" ]]; then
    mkdir -p /etc/wpa_supplicant
    mv /etc/systemd/network/20-wired.network /etc/systemd/network/25-wireless.network
    /usr/bin/wpa_passphrase "\${USERESSID}" "\${USERWPAPW}" > /etc/wpa_supplicant/wpa_supplicant-\${USERIFACE}.conf
    systemctl enable wpa_supplicant@\${USERIFACE}.service
fi
# turn on networking
systemctl enable systemd-networkd.service
# add machine to hostsfile
echo -e "127.0.0.1\\t\${MACHNAME}.localdomain\\t\${MACHNAME}" >> /etc/hosts

# enable ntpd
systemctl enable openntpd.service

# enable sshd
systemctl enable sshd.socket

# make the install device bootable via EFI
shownotice "Finishing install"
PARTUUID=\$(blkid -s PARTUUID -o value ${INSTALLDEVICE}2)
mkdir -p /boot/loader/entries
cat > /boot/loader/entries/arch.conf <<EOF2
title          Arch Linux
linux          /vmlinuz-linux
initrd         /initramfs-linux.img
options        root=PARTUUID=\${PARTUUID} rw
EOF2
bootctl install
shownotice "Beginning compute node setup"
curl --connect-timeout 10 -s -O "\${CONTROLLER}/compute-setup"
/bin/bash ./compute-setup
EOF
chmod +x /mnt/root/stage1.5
arch-chroot /mnt /root/stage1.5

shownotice "Installation complete"
echo "Rebooting in 10 seconds."
sleep 10
reboot
