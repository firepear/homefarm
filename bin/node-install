#!/bin/bash
set -e

function hf_clockcheck() {
    shownotice "Hardware clock check"
    cat <<EOF
The system time (hardware clock) needs to be set to UTC. The present
time, according to the system clock, is:

EOF
    date '+%F %T'
    UTC=$(affirmative "Is this correct")
    if [[ "${UTC}" == "false" ]]; then
        echo "Please reboot and set the hardware clock."
        echo
        exit 1
    fi
}

function hf_storageconfig() {
    shownotice "Drive configuration"
    echo "These are the storage devices on this machine:"
    echo
    DRIVES=( /dev/sd? /dev/nvme?n? )
    for I in $( seq 0 $((${#DRIVES[@]} - 1)) )
    do
        PARTMAPRAW=$(parted -m -s "${DRIVES[${I}]}" print 2>/dev/null) || true
        readarray PARTMAP <<<"${PARTMAPRAW}"
        echo -n "${I} - ${PARTMAP[1]}"
        for J in $( seq 2 $(( ${#PARTMAP[@]} - 1 )) )
        do
            echo -n -e "\t${PARTMAP[${J}]}"
        done
        echo
    done
    DRIVENUM=$(gutcheck "Enter the number of the device to be used")
    if [[ "${DRIVENUM}" = "" ]] && [[ ! ${+DRIVES[${DRIVENUM}]} ]]; then
        echo "Sorry, '${DRIVENUM}' is not a valid option. Terminating install."
        exit 1
    fi
    INSTALLDEVICE=${DRIVES[${DRIVENUM}]}
    echo
    echo "All data on ${INSTALLDEVICE} will be wiped."
    if [[ $(affirmative "Are you sure") == "false" ]]; then
        echo "exiting"
        exit 1
    fi
    echo "OK. Preparing ${INSTALLDEVICE}"

    # lay down new disk label
    parted -s "${INSTALLDEVICE}" mklabel gpt
    # make efi partition
    parted -s -a none "${INSTALLDEVICE}" mkpart ESP fat32 1MiB 513MiB
    parted -s "${INSTALLDEVICE}" name 1 "esp"
    parted "${INSTALLDEVICE}" set 1 boot on
    parted "${INSTALLDEVICE}" set 1 esp on

    # lay down system partition
    parted -s -a optimal "${INSTALLDEVICE}" mkpart primary ext4 513MiB 100%
    parted -s "${INSTALLDEVICE}" name 2 "root"
    echo -n "Settling partitions for 5 seconds... "
    sleep 2
    udevadm settle
    partx -u "${INSTALLDEVICE}"
    sleep 3
    echo "OK"
    # format and mount partitions
    mkfs.ext4 -F /dev/disk/by-partlabel/root
    mount /dev/disk/by-partlabel/root /mnt
    mkdir /mnt/boot
    mkfs.fat -F32 /dev/disk/by-partlabel/esp
    mount /dev/disk/by-partlabel/esp /mnt/boot
}



WPACONF="/etc/wpa_supplicant/w.conf"

if [[ "${1}" == "" ]]; then
    echo "error: no control node IP specified"
    echo "Usage is: ${0} CONTROL_NODE_IP INTERFACE_NAME [ESSID WPA_PASSPHRASE]"
    exit 1
fi
if [[ "${2}" == "" ]]; then
    echo "error: no network interface specified for configuration"
    echo "Usage is: ${0} CONTROL_NODE_IP INTERFACE_NAME [ESSID WPA_PASSPHRASE]"
    exit 1
fi
if [[ ! -e "${WPACONF}" ]]; then
    if [[ "${3}" != "" ]] && [[ "${4}" == "" ]]; then
        echo "error: ESSID specified without WPA passphrase"
        echo "Usage is: ${0} CONTROL_NODE_IP INTERFACE_NAME [ESSID WPA_PASSPHRASE]"
        exit 1
    fi
fi

CONTROLLER="${1}:9099"
USERIFACE="${2}"
USERESSID="${3}"
USERWPAPW="${4}"

# fetch util funcs
if [[ ! -e "common.sh" ]]; then
    curl --connect-timeout 10 --max-time 60 -f -s -S -O "${CONTROLLER}/common.sh"
fi
source ./common.sh

clear
shownotice "Beginning Homefarm/Arch install"
CPUARCH=$(hf_setarch)
if [[ "${CPUARCH}" == "x86_64" ]]; then
    # make sure the clock is set
    hf_clockcheck
    # and setup a drive
    hf_storageconfig
fi


shownotice "Base install"
# get cluster pacman.conf and mirrorlist
hf_fetch "${CONTROLLER}/pacman-${CPUARCH}.conf"
mv "pacman-${CPUARCH}.conf" /etc/pacman.conf
hf_fetch  "${CONTROLLER}/mirrorlist-${CPUARCH}"
mv "mirrorlist-${CPUARCH}" /etc/pacman.d/mirrorlist
# do install of needed packages
if [[ "${CPUARCH}" == "armv7h" ]] || [[ "${CPUARCH}" == "aarch64" ]]; then
    # just use pacman
    pacman -Syu --noconfirm
    pacman -S --noconfirm --needed openssh python ansible sudo grep awk boinc-nox vi mg
    if [[ -e "${WPACONF}" ]]; then
        mv "${WPACONF}" "/etc/wpa_supplicant/wpa_supplicant-${USERIFACE}.conf"
    fi
else
    # base install via pacstrap
    pkglist="base openssh wpa_supplicant dmidecode lm_sensors python ansible sudo grep awk boinc-nox linux linux-firmware vi mg"
    pacstrap /mnt ${pkglist}
    # generate /etc/fstab
    genfstab -U /mnt >> /mnt/etc/fstab
    # copy over resolf.conf so the system will have nameservice
    rm -f /mnt/etc/resolv.conf
    cp /etc/resolv.conf /mnt/etc/resolv.conf
    # install pacman.conf and mirrorlist to system
    cp /etc/pacman.conf /mnt/etc/pacman.conf
    cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
    # copy wpa configuration if we have it
    if [[ -e "${WPACONF}" ]]; then
        mkdir -p /mnt/etc/wpa_supplicant
        cp "${WPACONF}" "/mnt/etc/wpa_supplicant/wpa_supplicant-${USERIFACE}.conf"
    fi
fi

cat > /root/stage1 <<EOF
#!/bin/bash
set -e
cd /root

CONTROLLER="${CONTROLLER}"
USERIFACE="${USERIFACE}"
USERESSID="${USERESSID}"
USERWPAPW="${USERWPAPW}"
WPACONF="/etc/wpa_supplicant/wpa_supplicant-${USERIFACE}.conf"
INSTALLDEVICE="${INSTALLDEVICE}"

source ./common.sh

# set TZ
shownotice "Timezone configuration"
cat <<EOF2
Please enter your timezone (e.g. America/Mexico_City). If you don't
know your TZ, google 'list of tz database time zones' and refer to the
resulting Wikipedia page.

EOF2
until [[ "\${TZ}" != "" ]]; do
    TZ=\$(gutcheck "Enter your TZ")
    if [[ ! -e /usr/share/zoneinfo/\${TZ} ]]; then
        echo "That TZ doesn't exist! Please check your TZ string."
        TZ=""
    fi
done
ln -sf "/usr/share/zoneinfo/\${TZ}" /etc/localtime
hwclock --systohc || true

shownotice "Networking setup"
# set hostname
MACHNAME=\$(gutcheck "Please enter the machine's hostname" "node00")
echo \${MACHNAME} > /etc/hostname
echo
USERADDR=\$(gutcheck "\${USERIFACE}'s address (e.g. 192.168.1.7/24)")
echo
USERGW=\$(gutcheck "\${USERIFACE}'s gateway")
echo
USERDNS=\$(gutcheck "\${USERIFACE}'s DNS entries" "8.8.4.4 8.8.8.8")
rm -f /etc/systemd/network/*
cat > /etc/systemd/network/20-wired.network <<EOF2
[Match]
Name=\${USERIFACE}

[Network]
Address=\${USERADDR}
Gateway=\${USERGW}
EOF2
for dns in \${USERDNS}; do
    echo "DNS=\${dns}" >> /etc/systemd/network/20-wired.network
done
# if we have a wpa file or essid, then all this needs to be wireless
if [[ -e "\${WPACONF}" ]] || [[ "\${USERESSID}" != "" ]]; then
    if [[ ! -e "\${WPACONF}" ]]; then
        mkdir -p /etc/wpa_supplicant
        /usr/bin/wpa_passphrase "\${USERESSID}" "\${USERWPAPW}" > /etc/wpa_supplicant/wpa_supplicant-\${USERIFACE}.conf
    fi
    mv /etc/systemd/network/20-wired.network /etc/systemd/network/25-wireless.network
    systemctl enable wpa_supplicant@\${USERIFACE}.service
fi
# turn on networking
systemctl enable systemd-networkd.service
# add machine to hostsfile
echo -e "127.0.0.1\\t\${MACHNAME}.localdomain\\t\${MACHNAME}" >> /etc/hosts

# enable ntp
sed -i -e 's/^#NTP=/NTP=0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org/' /etc/systemd/timesyncd.conf
sed -i -e 's/^#Fallback/Fallback/' /etc/systemd/timesyncd.conf
systemctl enable systemd-timesyncd.service

# enable sshd
systemctl enable sshd

# enable boinc-client
systemctl enable boinc-client

# initial locale setup
echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
locale-gen > /dev/null


if [[ "\${INSTALLDEVICE}" != "" ]]; then
    # make the install device bootable via EFI
    shownotice "Finishing install"
    if [[ "\${INSTALLDEVICE}" =~ ^/dev/nvme ]]; then
        INSTALLPART="\${INSTALLDEVICE}p2"
    else
        INSTALLPART="\${INSTALLDEVICE}2"
    fi
    PARTUUID=\$(blkid -s PARTUUID -o value \${INSTALLPART})
    mkdir -p /boot/loader/entries
    cat > /boot/loader/entries/arch.conf <<EOF2
    title          Arch Linux
    linux          /vmlinuz-linux
    initrd         /initramfs-linux.img
    options        root=PARTUUID=\${PARTUUID} rw
EOF2
    bootctl install
fi

CPUARCH=\$(hf_setarch)

# grab the controller's ssh key, for later
hf_fetch "${CONTROLLER}/id_farmer.pub"

# create user, set passwd, config sudo access, and setup ssh keys
shownotice "Creating user for Ansible"
useradd -d /home/farmer -m -s /bin/bash farmer
passwd=\$( openssl passwd -1 -salt BOINC "\$(openssl rand -base64 32)" )
usermod -p "\${passwd}" farmer
echo "farmer ALL=(ALL) NOPASSWD:ALL" | tee -a /etc/sudoers > /dev/null
mkdir -p /home/farmer/.ssh
chmod 700 /home/farmer/.ssh
mv id_farmer.pub /home/farmer/.ssh/authorized_keys
chown -R farmer:farmer /home/farmer/.ssh
sed -i -E 's/^\#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config

# randomize or set root passwd
shownotice "Set root password"
passwd=\$(gutcheck "Enter a password for root", "Randomize")
if [[ "\${passwd}" == "Randomize" ]]; then
    passwd=\$( openssl passwd -1 -salt BOINC "\$(openssl rand -base64 32)" )
else
    passwd=\$( openssl passwd -1 -salt BOINC "\${passwd}" )
fi
usermod -p "\${passwd}" root

if [[ "\${CPUARCH}" == "x86_64" ]]; then
    shownotice "Setting up boot tasks and parameters"
    hf_fetch "${CONTROLLER}/atboot.service"
    mv atboot.service /etc/systemd
    systemctl enable atboot

    bootparams=\$(gutcheck "Enter desired boot parameters" "vsyscall=emulate mitigations=off")
    # add vsyscall to kernel boot parameters; needed for FAH2
    sedcmd="s/^(options\s+.*)\\\$/\1 \${bootparams}/"
    sed -i -E -e "\${sedcmd}" /boot/loader/entries/arch.conf
fi

# this is a no-op if already enabled, and saves the user a step on
# reboot if they had to use this workaround
systemctl enable systemd-resolved
EOF


if [[ "${CPUARCH}" == "x86_64" ]]; then
    cp /root/stage1 /mnt/root/stage1
    chmod +x /mnt/root/stage1
    cp ./common.sh /mnt/root
    arch-chroot /mnt /root/stage1
    umount /mnt/boot
    umount /mnt
else
    chmod +x /root/stage1
    /root/stage1
fi

shownotice "Installation complete"
echo "Rebooting in 5 seconds."
sleep 5
reboot
