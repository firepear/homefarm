#!/bin/env python3

#
# query - parse and operate on BOINC job logs
#

import argparse
import glob
import os
import sys
import time


def strtime(time):
    days = 0
    hours = 0
    mins = 0
    timestr = ""
    if time > 86400:
        days = int(time / 86400)
        time = time - (86400 * days)
    if time > 3600:
        hours = int(time / 3600)
        time = time - (3600 * hours)
    if time > 60:
        mins = int(time / 60)
        time = time - (60 * mins)
    if days > 0:
        return "{}d {:02d}h {:02d}min {:02d}s".format(days, hours, mins, int(time))
    return "{:02d}h {:02d}min {:02d}s".format(hours, mins, int(time))


########################################################################
# main script begins

# set up and handle arguments
parser = argparse.ArgumentParser(description='parse BOINC job logs')
parser.add_argument('-p', '--project', metavar='PROJECT_NAME', dest="projurl", default="ALL",
                    help="partial name of the joblog to be parsed. must be unique")
parser.add_argument('-t', '--type', metavar='WU_TYPE', dest="wutype", default=None,
                    help="the workunit type/name to filter by (e.g. MCM1)")
parser.add_argument('-s', '--timespan', metavar='HOURS', dest="span", type=int, default=24,
                    help="how many hours of logs to parse (default: 24)")
parser.add_argument('-c', '--count-only', dest="count", action="store_true",
                    help="show WU counts only; do not print min/max/quintile times")
args = parser.parse_args()

# turn args.projurl into a joblog filepath
joblogs = []
if args.projurl == "ALL":
    joblogs = glob.glob("/var/lib/boinc/job_log_*.txt")
else:
    globpath = "/var/lib/boinc/job_log_*{}*.txt".format(args.projurl)
    joblogs = glob.glob(globpath)
    if len(joblogs) == 0:
        print("Can't find any attached projects matching '{}'".format(args.projurl))
        sys.exit(2)
    if len(joblogs) > 1:
        print("Found multiple projects matching '{}'; must have exactly one match".format(args.projurl))
        sys.exit(2)

# and the timespan
timelimit = int(time.mktime(time.localtime()) - (3600 * args.span))

matches = []
cputime = 0
f = None

# The zeroth column is the log time (Unix style -- milliseconds since 1/1/1970 UTC)
# 1  2
# ue estimated run time of the work unit
# 3  4
# ct actual CPU time
# 5  6
# fe estimated flops
# 7  8
# nm work unit name
# 9  10
# et elapsed time (work unit wall clock time)
# 11 12
# es status (rc)
for joblog in joblogs:
    try:
        f = open(joblog, 'r')
    except:
        print("\tNot attached")
        sys.exit(0)

    for line in f:
        line = line.rstrip("\n")
        # split line into fields: see above
        fields = line.split()
        # skip this line if it's not within our timespan
        if int(fields[0]) < timelimit:
            continue
        # skip line if it's not the type/name we're looking for
        if args.wutype != None:
            if args.wutype not in fields[8]:
                continue
        time = int(float(fields[4]))
        matches.append(time)
        cputime += time

print("WUs in past {} hours: {}".format(args.span, len(matches)))
print("Total CPU time used:  {}".format(strtime(cputime)))
if len(matches) == 0:
    sys.exit(0)
if args.count:
    sys.exit(0)

mintime = strtime(min(matches))
maxtime = strtime(max(matches))
avgtime = strtime(sum(matches)/len(matches))
print("\tMin runtime: {}".format(mintime))
print("\tMax runtime: {}".format(maxtime))
print("\tAvg runtime: {}".format(avgtime))
if len(matches) < 2:
    sys.exit(0)

print("WUs by quintile:")
qspan = int((max(matches) -  min(matches)) / 5)
q = [ min(matches) + qspan, min(matches) + qspan * 2, min(matches) + qspan * 3,
      min(matches) + qspan * 4, max(matches) ]
qcounts = [0, 0, 0, 0, 0]
for m in matches:
    if m >= min(matches) and m < q[0]:
        qcounts[0] += 1
    elif m >= q[0] and m < q[1]:
        qcounts[1] += 1
    elif m >= q[1] and m < q[2]:
        qcounts[2] += 1
    elif m >= q[2] and m < q[3]:
        qcounts[3] += 1
    else:
        qcounts[4] += 1
for i in range(5):
    print("\t<= {}\t {}\t ({:04.1f}%)".format(strtime(q[i]), qcounts[i],
                                              qcounts[i] / len(matches) * 100))
