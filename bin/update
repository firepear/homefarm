#!/bin/bash

declare -A FP_CONFIG
source ./bin/common.sh
fp_parseconfig ./.fpconfig.json homefarm

DEVMODE="false"
REPOUPD="false"

update_homefarm() {
    # if we have a stored latest tag, read it in as current
    if [[ -e ./.current_tag ]]; then
        CURRENT_TAG=$(cat ./.current_tag)
    fi

    # check github for the most recent tag
    resp=$(curl --connect-timeout 10 --max-time 60 -f -s -S 'https://api.github.com/repos/firepear/homefarm/tags')
    rc=${?}
    if [[ ${rc} -ne 0 ]]; then
        echo "error: couldn't fetch tags list from github. problem was:"
        echo "${resp}"
        exit ${rc}
    fi
    NEWEST_TAG=$(echo ${resp} | python3 -c 'import sys, json; print(json.load(sys.stdin)[0]["name"])')

    if [[ "${CURRENT_TAG}" == "${NEWEST_TAG}" ]]; then
        # if tags match, do nothing
        git checkout main >> /dev/null 2>&1
        git checkout "${NEWEST_TAG}" >> /dev/null 2>&1
        return
    fi

    shownotice "New Homefarm release: ${NEWEST_TAG}"
    git checkout main >> /dev/null 2>&1
    git pull >> /dev/null 2>&1
    git checkout "${NEWEST_TAG}" >> /dev/null 2>&1

    # cache the new tag name and set repo update flag
    echo "${NEWEST_TAG}" > ./.current_tag
    touch ./.repoupdate

    shownotice "Homefarm updated; restarting update"
    echo; echo; echo
    exec "${1}"
}

update_os() {
    cd ${FP_CONFIG[rootdir]}
    # future me running shellcheck: this variable is exported from
    # common.sh, in the update_localrepo function
    if [[ "${localrepo_updated}" == "true" ]]; then
        shownotice "Updating nodes"
        ansible-playbook nodes-system-update.yml
    fi
}




######################################################################
# arg handling

while [[ "${1}" =~ ^-- ]]; do
    case "${1}" in
        "--devmode")
            DEVMODE="true"
            rm -f "${FP_CONFIG[localrepo]}/x86_64/prevmd5"
            echo "DEVMODE enabled"
            ;;
        "--repoup")
            REPOUPD="true"
            echo "REPOUPD enabled"
            echo "Forcing repo update"
            ;;
        "--force")
            FORCEUP="true"
            echo "Forcing node update"
            ;;
        "--help")
            echo "Usage: farmctl update [--repoup] [--force]"
            echo
            echo "See 'farmctl help' and docs/update.md for more information."
            exit 0
            ;;
        *)
            echo "unknown arg '${arg}'; see 'farmctl update --help'"
            exit
    esac
    shift
done
# handle unknown args
if [[ "${1}" != "" ]]; then
    echo "unknown arg '${1}'; see 'farmctl update --help'"
    exit 1
fi


# read in mirror; error if we don't have one
if [[ "${FP_CONFIG[mirrorurl]}" == "HF_MIRRORURL_UNSET" ]]; then
    cat <<EOF
There is no mirror URL set for the local repo. Has 'farmctl init' been
run successfully?
EOF
    exit 1
fi

######################################################################
# script proper begins

NODES=($(grep -E '^(node|stor)' farm.cfg | cut -f1 -d' ' | xargs))
FIRSTNODE="${NODES[0]}"

if [[ "${DEVMODE}" == "false" ]]; then
    update_homefarm "${0}"
fi

mirrorurl="${FP_CONFIG[mirrorurl]}"
update_localrepo "${FP_CONFIG[localrepo]}" "${mirrorurl}" "${FIRSTNODE}"
if [[ "${?}" != "0" ]]; then
    exit 1
fi
if [[ "${REPOUPD}" == "true" && "${FORCEUP}" == "" ]]; then
    exit 0
fi

update_os "${arch}"

# this sets the custom BOINC unit file, and pushes utils to
# nodes. those need to be refreshed every time there is an update,
# of any sort.
if [[ -e ./.repoupdate ]] || [[ "${localrepo_updated}" == "true" ]]; then
    shownotice "Pushing updated scripts to compute nodes"
    ansible-playbook nodes-boinc-setup.yml
    rm -f ./.repoupdate
fi

# reboots
if [[ "${localrepo_updated}" == "true" || "${FORCEUP}" == "true" ]]; then
    shownotice "Rebooting nodes"
    for node in ${NODES[*]}; do
        if [[ "$(ping -c1 -W 2 "${node}" | grep -c '100% packet loss')" == "1" ]]; then
            ssh "farmer@${node}" 'sudo reboot' || true
        fi
    done
fi


echo "Everything is up to date"
