#!/bin/bash
set -e

CONUPDATES=0
LOCALREPO="/var/cache/homefarm/arch"

update_homefarm() {
    # if we have a stored latest tag, read it in as current
    if [[ -e ./.current_tag ]]; then
        CURRENT_TAG=$(cat ./.current_tag)
    fi
    # check github for the most recent tag
    NEWEST_TAG=$(curl -s 'https://api.github.com/repos/firepear/homefarm/tags' | python3 -c 'import sys, json; print(json.load(sys.stdin)[0]["name"])')

    if [[ "${CURRENT_TAG}" == "${NEWEST_TAG}" ]]; then
        # if tags match, do nothing
        shownotice "Homefarm is up to date: ${NEWEST_TAG}"
        return
    fi

    shownotice "New Homefarm release: ${NEWEST_TAG}"
    git pull

    # cache the new tag name and set repo update flag
    echo "${NEWEST_TAG}" > ./.current_tag
    touch ./.repoupdate

    shownotice "Repo updated; restarting update"
    echo; echo; echo
    exec "${1}"
}

update_os() {
    cd ~/homefarm
    shownotice "Checking for OS updates"
    CONUPDATES=$(sudo pacman -Sy > /dev/null && pacman -Qu | wc -l)
    if [[ "${CONUPDATES}" -gt "0" ]]; then
        echo "Updating control node OS packages"
        yes | sudo pacman -Syuq > /dev/null 2>&1
        yes | sudo pacman -Sccq > /dev/null 2>&1
    fi

    # future me running shellcheck: this variable is exported from
    # common.sh, in the update_localrepo function
    if [[ "${localrepo_updated}" == "true" ]]; then
        echo "Updating compute node OS packages"
        ansible-playbook compute-nodes-system-update.yml
    fi
}

update_boinc() {
    cd ~/homefarm
    # if repo update flag file exists, update BOINC and clear the flag
    if [[ -e ./.repoupdate ]]; then
        shownotice "Updating BOINC on compute nodes"
        ansible-playbook compute-nodes-boinc.yml
        rm ./.repoupdate
    fi
}




######################################################################
# arg handling

# handle help
if [[ "${1}" == "-h" ]] || [[ "${1}" == "--help" ]]; then
    cat <<EOF
Update the cluster's OS and Homefarm install, as needed.

See README.md for more information.
EOF
    exit 0
fi

# read in utility code (includes update_localrepo)
cd ~/homefarm
. ./bin/common.sh

# handle setting mirror
if [[ "${1}" == "-m" ]] || [[ "${1}" == "--set-mirror" ]]; then
    if [[ ! "${2}" =~ ^http ]]; then
        echo "error: must provide mirror URL with -m/--set-mirror"
        exit 1
    fi
    echo "${2}" > ./.mirror_url
    echo "Mirror url set to '${MIRROR_URL}'"
    update_localrepo "${LOCALREPO}" "${2}"
    exit 0
fi
# read in mirror; error if we don't have one
if [[ -e ./.mirror_url ]]; then
    MIRROR_URL=$(cat ./.mirror_url)
else
    cat <<EOF
Please run '${0} --set-mirror MIRROR_URL' to set the local repo's
upstream mirror.

See README.md for more information.
EOF
    exit 1
fi

# handle unknown args
if [[ "${1}" != "" ]]; then
    cat <<EOF
error: unknown argument: "${1}"

See README.md for more information.
EOF
    exit 1
fi

######################################################################
# script proper begins

NODES=( ./nodes/*yml )
NODE=$(basename "${NODES[0]}" .yml)

update_homefarm "${0}"
update_localrepo "${LOCALREPO}" "${MIRROR_URL}" "${NODE}"
update_os
update_boinc

if [[ "${localrepo_updated}" == "true" ]]; then
    shownotice "Rebooting compute nodes"
    for node in nodes/*yml; do
        ssh "farmer@$(basename """${node}""" .yml)" 'sudo reboot' || true
    done
fi

if [[ "${CONUPDATES}" -gt "0" ]]; then
    shownotice "Update complete; rebooting control node"
    sudo reboot
else
    shownotice "Everything is up to date"
fi
