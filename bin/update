#!/bin/bash
set -e

update_os() {
    shownotice "Updating the control node"
    yes | sudo pacman -Syu
    # this is where we add new packages, when we discover we need them

    shownotice "Updating ansible (if needed)"
    sudo pip3 install ansible --upgrade

    shownotice "Control node update complete"

    shownotice "Updating compute nodes"
    ansible-playbook compute-nodes-system-update.yml
}

update_farm() {
    # if we have a stored latest tag, read it in as current
    if [[ -e ./.current_tag ]]; then
        CURRENT_TAG=$(cat ./.current_tag)
    fi
    # check github for the most recent tag
    NEWEST_TAG=$(curl -s 'https://api.github.com/repos/firepear/homefarm/tags' | python3 -c 'import sys, json; print(json.load(sys.stdin)[0]["name"])')

    if [[ "${1}" != "--force" ]]; then
        if [[ "${CURRENT_TAG}" == "${NEWEST_TAG}" ]]; then
            # if tags match, do nothing
            shownotice "Homefarm is up to date: ${NEWEST_TAG}"
            return
        else
            # otherwise proceed with upgrade
            shownotice "there is a new release: ${NEWEST_TAG}"
        fi
    else
        shownotice "Forcing update"
    fi

    shownotice "Updating the homefarm repo"
    git pull

    shownotice "Updating compute nodes"
    ansible-playbook compute-nodes-boinc.yml

    # we made it down here, so cache the new tag name
    if [[ "${1}" != "--force" ]]; then
        echo "${NEWEST_TAG}" > ./.current_tag
    fi
}



if [[ "${1}" == "-h" ]] || [[ "${1}" == "--help" ]]; then
    cat <<EOF
Update the cluster's OS and Homefarm install, as needed.

See README.md for more information.
EOF
    exit 0
fi

MODE="${1}"

# cd to homefarm and source util funcs
. ./bin/util.sh

update_os
update_farm "${2}"

shownotice "rebooting compute nodes"
for node in nodes/*yml; do
    ssh "farmer@$(basename ${node} .yml)" 'sudo reboot'
done

shownotice "Update complete; rebooting control node"
sudo reboot
