#!/bin/bash

declare -A FP_CONFIG
source ./bin/common.sh
fp_parseconfig ./.fpconfig.json homefarm

DEVMODE="false"

update_homefarm() {
    # if we have a stored latest tag, read it in as current
    if [[ -e ./.current_tag ]]; then
        CURRENT_TAG=$(cat ./.current_tag)
    fi

    # check github for the most recent tag
    resp=$(curl --connect-timeout 10 --max-time 60 -f -s -S 'https://api.github.com/repos/firepear/homefarm/tags')
    rc=${?}
    if [[ ${rc} -ne 0 ]]; then
        echo "error: couldn't fetch tags list from github. problem was:"
        echo "${resp}"
        exit ${rc}
    fi
    NEWEST_TAG=$(echo ${resp} | python3 -c 'import sys, json; print(json.load(sys.stdin)[0]["name"])')

    if [[ "${CURRENT_TAG}" == "${NEWEST_TAG}" ]]; then
        # if tags match, do nothing
        git checkout master >> /dev/null 2>&1
        git checkout "${NEWEST_TAG}" >> /dev/null 2>&1
        return
    fi

    shownotice "New Homefarm release: ${NEWEST_TAG}"
    git checkout master >> /dev/null 2>&1
    git pull >> /dev/null 2>&1
    git checkout "${NEWEST_TAG}" >> /dev/null 2>&1

    # cache the new tag name and set repo update flag
    echo "${NEWEST_TAG}" > ./.current_tag
    touch ./.repoupdate

    shownotice "Homefarm updated; restarting update"
    echo; echo; echo
    exec "${1}"
}

update_os() {
    cd ${FP_CONFIG[rootdir]}
    # future me running shellcheck: this variable is exported from
    # common.sh, in the update_localrepo function
    if [[ "${localrepo_updated}" == "true" ]]; then
        shownotice "Updating compute nodes"
        ansible-playbook nodes-system-update.yml
    fi
}




######################################################################
# arg handling

# handle help
if [[ "${1}" == "-h" ]] || [[ "${1}" == "--help" ]]; then
    cat <<EOF
Update the cluster's OS and Homefarm install, as needed.

See docs/update.md for more information.
EOF
    exit 0
fi

# set dev mode, if requested
if [[ "${1}" == "--devmode" ]]; then
    DEVMODE="true"
    for arch in ${FP_CONFIG[marches]}; do
        rm -f "${FP_CONFIG[localrepo]}/${arch}/prevmd5"
    done
    echo "DEVMODE enabled"
    shift
fi

# read in mirror; error if we don't have one
if [[ "${FP_CONFIG[mirrorurl]}" == "HF_MIRRORURL_UNSET" ]]; then
    cat <<EOF
There is no mirror URL set for the local repo. Has 'control init' been
run successfully?
EOF
    exit 1
fi

# handle unknown args
if [[ "${1}" != "" ]]; then
    cat <<EOF
error: unknown argument: "${1}"

See docs/update.md for more information.
EOF
    exit 1
fi

######################################################################
# script proper begins

NODES=( ./nodes/*yml )
NODE=$(basename "${NODES[0]}" .yml)

if [[ "${DEVMODE}" == "false" ]]; then
    update_homefarm "${0}"
fi

for arch in ${FP_CONFIG[marches]}; do
    if [[ "${arch}" == "armv7h" ]] || [[ "${arch}" == "aarch64" ]]; then
        mirrorurl="http://mirror.archlinuxarm.org"
    else
        mirrorurl="${FP_CONFIG[mirrorurl]}"
    fi
    update_localrepo "${FP_CONFIG[localrepo]}" "${mirrorurl}" "${arch}" "${NODE}"
    if [[ "${?}" != "0" ]]; then
        exit 1
    fi
    if [[ "${arch}" == "armv7h" ]]; then
        # the arch repos list 32-bit arm as "v7h", but it's "v7l" on modern rpis
        arch="armv7l"
    fi

    update_os "${arch}"

    # this sets the custom BOINC unit file, and pushes utils to
    # nodes. those need to be refreshed every time there is an update,
    # of any sort.
    if [[ -e ./.repoupdate ]] || [[ "${localrepo_updated}" == "true" ]]; then
        shownotice "Pushing updated scripts to ${arch} nodes"
        ansible-playbook nodes-boinc-setup.yml
        if [[ -e ./.repoupdate ]]; then
            rm ./.repoupdate
        fi
    fi

    # reboots
    if [[ "${localrepo_updated}" == "true" ]]; then
        shownotice "Rebooting ${arch} nodes"
        for node in nodes/*yml; do
            node_arch=$(ssh "farmer@$(basename """${node}""" .yml)" 'uname -m')
            if [[ "${node_arch}" == "${arch}" ]]; then
                ssh "farmer@$(basename """${node}""" .yml)" 'sudo reboot' || true
            fi
        done
    fi
done


echo "Everything is up to date"
