#!/bin/bash
set -e

CONUPDATES=0
COMUPDATES=0
LOCALREPO="/var/cache/homefarm/arch"

update_homefarm() {
    # if we have a stored latest tag, read it in as current
    if [[ -e ./.current_tag ]]; then
        CURRENT_TAG=$(cat ./.current_tag)
    fi
    # check github for the most recent tag
    NEWEST_TAG=$(curl -s 'https://api.github.com/repos/firepear/homefarm/tags' | python3 -c 'import sys, json; print(json.load(sys.stdin)[0]["name"])')

    if [[ "${CURRENT_TAG}" == "${NEWEST_TAG}" ]]; then
        # if tags match, do nothing
        shownotice "Homefarm is up to date: ${NEWEST_TAG}"
        return
    fi

    shownotice "New Homefarm release: ${NEWEST_TAG}"
    git pull

    # cache the new tag name and set repo update flag
    echo "${NEWEST_TAG}" > ./.current_tag
    touch ./.repoupdate

    shownotice "Repo updated; restarting update"
    echo; echo; echo
    exec "${1}"
}

update_os() {
    shownotice "Checking for control node OS updates"
    CONUPDATES=$(sudo pacman -Sy > /dev/null && pacman -Qu | wc -l)
    if [[ "${CONUPDATES}" -gt "0" ]]; then
        shownotice "Updating control node OS packages"
        echo "This may take a while..."
        yes | sudo pacman -Syu > /dev/null

        shownotice "Updating ansible (if needed)"
        sudo pip3 install ansible --upgrade
    fi

    shownotice "Checking for compute node OS updates"
    COMUPDATES=$(ssh "farmer@${NODE}" 'sudo pacman -Sy > /dev/null && pacman -Qu | wc -l')
    if [[ "${COMUPDATES}" -gt "0" ]]; then
        shownotice "Updating compute nodes"
        ansible-playbook compute-nodes-system-update.yml
    fi
}

update_localrepo() {
    shownotice "Updating local mirror"
    # generate and grab packages list
    ssh "farmer@${NODE}" 'sudo pacman -Qi | grep Name | awk '"'"'{print $3}'"'"' > pkgs.txt'
    mkdir -p "${LOCALREPO}/db"
    scp "farmer@${NODE}:pkgs.txt" "${LOCALREPO}/db/pkgs.txt"
    # grab db files from mirror and unpack them

    # parse the desc file in each dir, mapping %BASE% to [ repo,
    # %FILENAME% ]. also build a list of filenames.

    # if a filename is not in ${LOCALREPO}, download it

    # if a file in ${LOCALREPO} is not in the filename list, delete it

    # rebuild the localrepo's index
}

update_boinc() {
    # if repo update flag file exists, update BOINC and clear the flag
    if [[ -e ./.repoupdate ]]; then
        shownotice "Updating BOINC on compute nodes"
        ansible-playbook compute-nodes-boinc.yml
        rm ./.repoupdate
    fi
}

######################################################################
# arg handling

# handle help
if [[ "${1}" == "-h" ]] || [[ "${1}" == "--help" ]]; then
    cat <<EOF
Update the cluster's OS and Homefarm install, as needed.

See README.md for more information.
EOF
    exit 0
fi

# handle setting mirror
if [[ "${1}" == "-m" ]] || [[ "${1}" == "--set-mirror" ]]; then
    if [[ "${2}" == "" ]]; then
        echo "error: must provide mirror URL with -m/--set-mirror"
        exit 1
    fi
    echo "${2}" > ./.mirror_url
fi
# read in mirror; error if we don't have one
if [[ -e ./.mirror_url ]]; then
    MIRROR_URL=$(cat ./.mirror_url)
else
    cat <<EOF
Please run '${0} --set-mirror MIRROR_URL' to set the local repo's
upstream mirror.

See README.md for more information.
EOF
    exit 1
fi


######################################################################
# script proper begins

# cd to homefarm and source util funcs
cd ~/homefarm
. ./bin/util.sh

NODES=( ./nodes/*yml )
NODE=$(basename "${NODES[0]}" .yml)

update_homefarm "${0}"
update_localrepo
update_os
update_boinc

if [[ "${COMUPDATES}" -gt "0" ]]; then
    shownotice "Rebooting compute nodes"
    for node in nodes/*yml; do
        ssh "farmer@$(basename """${node}""" .yml)" 'sudo reboot' || true
    done
fi

if [[ "${CONUPDATES}" -gt "0" ]]; then
    shownotice "Update complete; rebooting control node"
    sudo reboot
else
    shownotice "Everything is up to date"
fi
