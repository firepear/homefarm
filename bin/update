#!/bin/bash

LOCALREPO="/homefarm/srv/arch"
DEVMODE="false"

update_homefarm() {
    # if we have a stored latest tag, read it in as current
    if [[ -e ./.current_tag ]]; then
        CURRENT_TAG=$(cat ./.current_tag)
    fi

    # check github for the most recent tag
    resp=$(curl --connect-timeout 10 --max-time 60 -f -s -S 'https://api.github.com/repos/firepear/homefarm/tags')
    rc=${?}
    if [[ ${rc} -ne 0 ]]; then
        echo "error: couldn't fetch tags list from github. problem was:"
        echo "${resp}"
        exit ${rc}
    fi
    NEWEST_TAG=$(echo ${resp} | python3 -c 'import sys, json; print(json.load(sys.stdin)[0]["name"])')

    if [[ "${CURRENT_TAG}" == "${NEWEST_TAG}" ]]; then
        # if tags match, do nothing
        git checkout master >> /dev/null 2>&1
        git checkout "${NEWEST_TAG}" >> /dev/null 2>&1
        return
    fi

    shownotice "New Homefarm release: ${NEWEST_TAG}"
    git checkout master
    git pull
    git checkout "${NEWEST_TAG}"

    # cache the new tag name and set repo update flag
    echo "${NEWEST_TAG}" > ./.current_tag
    touch ./.repoupdate

    shownotice "Repo updated; restarting update"
    echo; echo; echo
    exec "${1}"
}

update_os() {
    cd /homefarm
    # future me running shellcheck: this variable is exported from
    # common.sh, in the update_localrepo function
    if [[ "${localrepo_updated}" == "true" ]]; then
        shownotice "Updating compute nodes"
        ansible-playbook nodes-system-update.yml
    fi
}




######################################################################
# arg handling

# handle help
if [[ "${1}" == "-h" ]] || [[ "${1}" == "--help" ]]; then
    cat <<EOF
Update the cluster's OS and Homefarm install, as needed.

See docs/update.md for more information.
EOF
    exit 0
fi

# set dev mode, if requested
if [[ "${1}" == "DEVMODE" ]]; then
    DEVMODE="true"
    shift
fi

# read in utility code (includes update_localrepo)
cd /homefarm
. ./bin/common.sh

# read in mirror; error if we don't have one
if [[ -e ./.mirror_url ]]; then
    MIRROR_URL=$(cat ./.mirror_url)
else
    cat <<EOF
There is no mirror URL set for the local repo. Has 'control init' been
run successfully?
EOF
    exit 1
fi

# handle unknown args
if [[ "${1}" != "" ]]; then
    cat <<EOF
error: unknown argument: "${1}"

See docs/update.md for more information.
EOF
    exit 1
fi

######################################################################
# script proper begins

NODES=( ./nodes/*yml )
NODE=$(basename "${NODES[0]}" .yml)

if [[ "${DEVMODE}" == "false" ]]; then
    update_homefarm "${0}"
fi

update_localrepo "${LOCALREPO}" "${MIRROR_URL}" "${NODE}"
update_os

# run this playbook here, because it sets the custom BOINC unit file,
# and pushes jlparse and boinccmdcmd to nodes. Those things need to be
# refreshed every time there is an update, of any sort.
if [[ -e ./.repoupdate ]] || [[ "${localrepo_updated}" == "true" ]]; then
    shownotice "Pushing updated scripts to nodes"
    ansible-playbook nodes-boinc-setup.yml
    if [[ -e ./.repoupdate ]]; then
       rm ./.repoupdate
    fi
fi

if [[ "${localrepo_updated}" == "true" ]]; then
    shownotice "Rebooting compute nodes"
    for node in nodes/*yml; do
        ssh "farmer@$(basename """${node}""" .yml)" 'sudo reboot' || true
    done
fi

echo "Everything is up to date"
