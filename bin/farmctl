#!/usr/bin/env bash

# Copyright (c) 2017-2019 Shawn Boyette <shawn@firepear.net>. All
# rights reserved.  Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.



# hf_init takes the place of the old control-install script. it
# handles the initial node setup, other than package install (which is
# done by the docker build)
function hf_init() {
    # generate ssh key
    shownotice "Generating SSH configuration for Ansible"
    if [[ -e /root/.ssh/id_farmer ]]; then
        echo "Skipping; already configured"
    else
        ssh-keygen -t ed25519 -N "" -f id_farmer
        mkdir -p /homefarm/.ssh
        mv id_farmer* /homefarm/.ssh
        chmod 700 /homefarm/.ssh
        /usr/bin/keychain -q --host control /homefarm/.ssh/id_farmer >> /dev/null 2>&1
        source /root/.keychain/control-sh >> /dev/null 2>&1
    fi

    # do local files and httpd setup
    shownotice "Configuring Homefarm installer webserver"
    if [[ -e /homefarm/srv/pacman.conf ]]; then
        echo "Skipping; already configured"
    else
        HOSTADDR=$(gutcheck "Docker host's address (e.g. 10.1.10.114)")
        # create local package cache dir
        mkdir -p /homefarm/srv/arch
        # copy ssh pubkey for distribution to nodes
        cp /homefarm/.ssh/id_farmer.pub /homefarm/srv
        # symlink install/setup scripts
        ln -fs /homefarm/bin/node-install /homefarm/srv
        ln -fs /homefarm/bin/node-setup /homefarm/srv
        ln -fs /homefarm/bin/common.sh /homefarm/srv
        ln -fs /homefarm/bin/util/fix-wlan0 /homefarm/srv
        sedexpr="s/CONTROL_NODE_IP/${HOSTADDR}/"
        sed -e "${sedexpr}" ./files/pacman.conf > ./srv/pacman.conf
        # copy the example farm inventory file to the real one
        cp ./files/farm.cfg ./farm.cfg
        # make the nodes directory for user convenience
        mkdir -p /homefarm/nodes
    fi

    shownotice "Initializing local package mirror"
    if [[ -e /homefarm/.mirror_url ]]; then
        echo "Skipping; already configured"
    else
        MIRROR_URL=$(gutcheck "URL of remote repo (e.g. http://mirrors.ocf.berkeley.edu/archlinux/)")
        echo "${MIRROR_URL}" > ./.mirror_url
        LOCALREPO="/homefarm/srv/arch"
        update_localrepo "${LOCALREPO}" "${MIRROR_URL}"
    fi

    shownotice "Setup complete"
}

# since /etc/hosts on a docker container is transient, but we need to
# have the compute nodes in it for a lot of things to work, we'll
# parse them out of farm.cfg and inject them into the hostsfile
function hf_buildhosts() {
    found_nodes="false"
    while read -r line; do
        if [[ "${found_nodes}" == "true" ]]; then
            nodename=$(echo "${line}" | cut -d' ' -f1)
            nodeip=$(echo "${line}" | awk '{print $2}' | cut -d'=' -f2)
            echo "${nodeip} ${nodename}" >> /etc/hosts
        fi
        if [[ "${line}" =~ compute_nodes ]]; then
            found_nodes="true"
        fi
    done < ./farm.cfg
}


################################################################################

# if we're not starting up the container, then put ourselves in a
# known location
if [[ "${1}" != "up" ]]; then
    cd /homefarm
    source ./bin/common.sh
fi


case "${1}" in
    init)
        hf_init
        ;;
    backup)
        exec ./bin/backup
        ;;
    cmd)
        exec ./bin/utils/farmcmd "${2}"
        ;;
    on-up)
        localip=$(awk 'END{print $1}' /etc/hosts)
        /usr/bin/darkhttpd /homefarm/srv --port 80 --daemon >> /dev/null
        /bin/ln -s /homefarm/.ssh /root/.ssh
        /bin/ln -s /homefarm/bin/complete /root/.bashrc
        /usr/bin/keychain -q --host control /homefarm/.ssh/id_farmer >> /dev/null 2>&1
        source /root/.keychain/control-sh >> /dev/null 2>&1
        echo
        echo "Welcome to homefarm"
        echo "    Local IP is ${localip}"
        echo "    Installer httpd is listening on DOCKERHOST:9099"
        echo "    Run 'farmctl' to see options, or refer to the docs"
        echo
        hf_buildhosts
        exec env PATH="${PATH}:/homefarm/bin" /bin/bash
        ;;
    node-init)
        exec /bin/ansible-playbook nodes-boinc-setup.yml
        ;;
    os-update)
        exec ./bin/update "${2}"
        ;;
    project-sync)
        exec /bin/ansible-playbook nodes-sync-projects.yml
        ;;
    status)
        tmpfile=$(mktemp)
        ./bin/stats "${mktemp}"
        tmplines=$(wc -l ${tmpfile} | cut -d' ' -f1)
        if [[ ${tmplines} -gt ${LINES} ]]; then
            less ${tmpfile}
        else
            cat ${tmpfile}
        fi
        rm ${tmpfile}
        ;;
    up)
        if [[ "${2}" == "" ]]; then
            HOMEFARM_DIR=~/homefarm
        else
            HOMEFARM_DIR="${2}"
        fi
        exec docker run --rm -p 9099:80 -v "${HOMEFARM_DIR}:/homefarm" -it control ./bin/farmctl on-up
        ;;
    version)
        echo "Homefarm v2.0.0"
        exit 0
        ;;
    *)
        if [[ "${1}" != "" && "${1}" != "help" ]]; then
            echo "error: unknown argument '${1}'"
        fi
        cat <<EOF
usage: ${0} COMMAND [ARGS]

Compute node commands:
    cmd <'COMMAND_LINE'>
      Run a command on all nodes. COMMAND_LINE be a single argument, so use
      quotes as appropriate

    node-init
      Do initial BOINC configuration on compute nodes

    os-update
      Update the controller and compute node OS packages

    query <PROJECT_URL> [-t <WU_TYPE>] [-s <TIMESPAN>]
      Generate counts and runtime data for WUs completed on a project in a given
      time. Defaults: all WUs; 24h

    status
      Display info on current tasks

    project-sync
      Sync project statuses to compute nodes

Controller commands:
    backup
      Create tarball with all farm-specific files

    init
      Initialize the controller (only needs to be run once, after creation)

    restore
      Restore farm state from a tarball created by 'farmctl backup'. Tarball must
      be in HOMEFARM_DIR

    up <HOMEFARM_DIR>
      Bring up an instance of the controller. Default is ~/homefarm

    version
      Display version information
EOF
esac
