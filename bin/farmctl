#!/usr/bin/env bash

# Copyright (c) 2017-2019 Shawn Boyette <shawn@firepear.net>. All
# rights reserved.  Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.
set -e
source ./bin/common.sh

function hf_init() {
    shownotice "Welcome to homefarm control node setup"

    # generate ssh key
    shownotice "Generating SSH configuration for Ansible"
    if [[ -e /homefarm/.ssh/id_farmer ]]; then
        echo "Skipping; already configured"
    else
        ssh-keygen -t ed25519 -N "" -f id_farmer
        mkdir -p /homefarm/.ssh
        mv id_farmer* /homefarm/.ssh
        chmod 700 /homefarm/.ssh
    fi

    # do local files and httpd setup
    shownotice "Configuring Homefarm installer webserver"
    if [[ -e /homefarm/srv/pacman.conf ]]; then
        echo "Skipping; already configured"
    else
        HOSTADDR=$(gutcheck "Docker host's address (e.g. 10.1.10.114)")
        # create local package cache dir
        mkdir -p /homefarm/srv/arch
        # copy ssh pubkey for distribution to nodes
        cp /homefarm/.ssh/id_farmer.pub /homefarm/srv
        # symlink install/setup scripts
        ln -fs /homefarm/bin/node-install /homefarm/srv
        ln -fs /homefarm/bin/node-setup /homefarm/srv
        ln -fs /homefarm/bin/common.sh /homefarm/srv
        sedexpr="s/CONTROL_NODE_IP/${HOSTADDR}/"
        sed -e "${sedexpr}" /homefarm/examples/pacman.conf > /homefarm/srv/pacman.conf
        # copy the example farm inventory file to the real one
        cp ./examples/farm.cfg ./farm.cfg
        # make the nodes directory for user convenience
        mkdir -p /homefarm/nodes
    fi

    shownotice "Initializing local package mirror"
    if [[ -e /homefarm/.mirror_url ]]; then
        echo "Skipping; already configured"
    else
        MIRROR_URL=$(gutcheck "URL of remote repo (e.g. http://mirrors.ocf.berkeley.edu/archlinux/)")
        echo "${MIRROR_URL}" > ./.mirror_url
        LOCALREPO="/homefarm/srv/arch"
        update_localrepo "${LOCALREPO}" "${MIRROR_URL}"
    fi

    shownotice "Setup complete"
}


case "${1}" in
    init)
        hf_init
        ;;
    on-up)
        localip=$(awk 'END{print $1}' /etc/hosts)
        /usr/bin/darkhttpd /homefarm/srv --port 80 --daemon >> /dev/null
        echo "Welcome to homefarm"
        echo "    Local IP is ${localip}"
        echo "    Installer httpd is listening on DOCKERHOST:9099"
        echo "    Run 'farmctl' to see options, or refer to the docs"
        exec env PATH="${PATH}:/homefarm/bin" /bin/bash
        ;;
    os-update)
        exec ./bin/update "${2}"
        ;;
    sync-nodes)
        exec /bin/ansible-playbook update-projects.yml
        ;;
    up)
        if [[ "${2}" == "" ]]; then
            echo "'${0} up' requires the path to your homefarm dir as an argument; exiting"
            exit 1
        fi
        exec docker run --rm -p 9099:80 -v "${2}:/homefarm" -it control "${0}" on-up
        ;;
    *)
        if [[ "${1}" != "" ]]; then
            echo "error: unknown argument '${1}'"
        fi
        cat <<EOF
usage: ${0} COMMAND [ARGS]
where COMMAND may be:

  cmd <'COMMAND_LINE'>
    Run a command on all nodes and display output

  os-update
    Update the controller and compute node OS packages

  stats <PROJECT_URL> [-t <WU_TYPE>] [-s <TIMESPAN>]
    Generate counts and runtime stats for WUs completed on a project in a
    given time. Defaults: all WUs; 24h

  sync-nodes
    Sync project statuses to compute nodes

  backup
    Create tarball with all farm-specific files

  init
    Initialize the controller (only needs to be run once, after creation)

  restore
    Restore farm state from a tarball created by 'farmctl backup'. Tarball
    must be in HOMEFARM_DIR

  up <HOMEFARM_DIR>
    Bring up an instance of the controller
EOF
esac
