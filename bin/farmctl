#!/usr/bin/env bash

# Copyright (c) 2017-2020 Shawn Boyette <shawn@firepear.net>. All
# rights reserved.  Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

set -e

declare -A FP_CONFIG

# hf_init takes the place of the old control-install script. it
# handles the initial node setup, other than package install (which is
# done by the docker build)
function hf_init() {
    # checkout most recent tag to ensure good state
    git checkout $(git tag | tail -1) >> /dev/null 2>&1

    # copy config file if it doesn't exist
    if [[ ! -e ./.fpconfig.json ]]; then
        cp /homefarm/files/fp_hf_config.json /homefarm/.fpconfig.json
    fi

    shownotice "Initializing Arch source repo config"
    # set mirror url
    if [[ "${FP_CONFIG[mirrorurl]}" == "HF_MIRRORURL_UNSET" ]]; then
        MIRROR_URL=$(grep '^Server' srv/homefarm/mirrorlist-x86_64 | cut -d' ' -f3 | cut -d'$' -f1)
        MIRROR_URL="${MIRROR_URL//\//'\/'}"
        sedexpr="s/HF_MIRRORURL_UNSET/${MIRROR_URL}/"
        sed -i -e "${sedexpr}" /homefarm/.fpconfig.json
        fp_parseconfig /homefarm/.fpconfig.json homefarm
        ln -s ./files/mirrorlist-armv7h srv/homefarm/mirrorlist-armv7h
        ln -s ./files/mirrorlist-armv7h srv/homefarm/mirrorlist-armv7l
    else
        echo "Skipping; already configured"
    fi
    # set marches
    if [[ "${FP_CONFIG[marches]}" == "HF_MARCHES_UNSET" ]]; then
        MARCHES=$(gutcheck "Arches to mirror" "x86_64")
        sedexpr="s/HF_MARCHES_UNSET/${MARCHES}/"
        sed -i -e "${sedexpr}" /homefarm/.fpconfig.json
        fp_parseconfig /homefarm/.fpconfig.json homefarm
    fi

    shownotice "Generating SSH configuration for Ansible"
    if [[ -e /root/.ssh/id_farmer ]]; then
        echo "Skipping; already configured"
    else
        # generate ssh key
        ssh-keygen -t ed25519 -N "" -f id_farmer
        mkdir -p /homefarm/.ssh
        mv id_farmer* /homefarm/.ssh
        chmod 700 /homefarm/.ssh
        /usr/bin/keychain -q --host control /homefarm/.ssh/id_farmer >> /dev/null 2>&1
        source /root/.keychain/control-sh >> /dev/null 2>&1
    fi

    # do local files and httpd setup
    shownotice "Configuring Homefarm installer webserver"
    if [[ -e "${FP_CONFIG[httpdir]}/pacman-x86_64.conf" ]]; then
        echo "Skipping; already configured"
    else
        HOSTADDR=$(gutcheck "Docker host's address (e.g. 10.1.10.114)")
        sedexpr="s/CONTROL_NODE_IP/${HOSTADDR}/"
        for arch in ${FP_CONFIG[marches]}; do
            sed -e "${sedexpr}" "./files/pacman-${arch}.conf" > "${FP_CONFIG[httpdir]}/pacman-${arch}.conf"
            if [[ "${arch}" == "armv7h" ]]; then
                ln -s "${FP_CONFIG[httpdir]}/pacman-${arch}.conf" "${FP_CONFIG[httpdir]}/pacman-archv7l.conf"
            fi
        done
        # create local package cache dir
        mkdir -p /homefarm/srv/arch
        # init project stats db
        ./bin/utils/pstracker -u >> /dev/null
    fi

    shownotice "Initializing local package mirror"
    for arch in ${FP_CONFIG[marches]}; do
        update_localrepo "${FP_CONFIG[localrepo]}" "${FP_CONFIG[mirrorurl]}" "${arch}"
    done

    # build gnatwren and create agent config file
    shownotice "Initializing Gnatwren"
    ansible-playbook gnatwren-control.yml
    sedexpr="s/0\.0\.0\.0/${HOSTADDR}/"
    if [[ ! -e ./gwagent-config.json ]]; then
        sed -e "${sedexpr}" ./files/gnatwren/assets/agent-config.json > ./gwagent-config.json
    fi

    shownotice "Finishing up initialization"
    cd "${FP_CONFIG[rootdir]}"
    # make the nodes directory for user convenience
    mkdir -p /homefarm/nodes
    # copy the example farm inventory file to the real one
    if [[ ! -e ./farm.cfg ]]; then
        cp ./files/farm.cfg ./farm.cfg
    fi
    # copy ssh pubkey for distribution to nodes
    cp /homefarm/.ssh/id_farmer.pub "${FP_CONFIG[httpdir]}"
    # symlink install/setup scripts
    ln -fs /homefarm/bin/node-install "${FP_CONFIG[httpdir]}"
    ln -fs /homefarm/bin/node-setup "${FP_CONFIG[httpdir]}"
    ln -fs /homefarm/bin/common.sh "${FP_CONFIG[httpdir]}"
    ln -fs /homefarm/bin/util/fix-wlan0 "${FP_CONFIG[httpdir]}"
    # symlink other files
    ln -fs /homefarm/files/atboot.service "${FP_CONFIG[httpdir]}"

    shownotice "Setup complete"
}

# since /etc/hosts on a docker container is transient, but we need to
# have the compute nodes in it for a lot of things to work, we'll
# parse them out of farm.cfg and inject them into the hostsfile
function hf_buildhosts() {
    if [[ ! -e ./farm.cfg ]]; then
        return
    fi
    found_nodes="false"
    while read -r line; do
        if [[ "${found_nodes}" == "true" ]]; then
            nodename=$(echo "${line}" | cut -d' ' -f1)
            nodeip=$(echo "${line}" | awk '{print $2}' | cut -d'=' -f2)
            echo "${nodeip} ${nodename}" >> /etc/hosts
        fi
        if [[ "${line}" =~ compute_nodes ]]; then
            found_nodes="true"
        fi
    done < ./farm.cfg
}

# to support one-shot commands, we need to do environment
# initialization without starting bash. so it lives here. but we also
# use this when we *are* starting bash :)
function hf_envinit() {
    /bin/ln -s /homefarm/.ssh /root/.ssh
    /bin/ln -s /homefarm/bin/utils/complete /root/.bashrc
    touch ./.bash_history
    /bin/ln -s /homefarm/.bash_history /root/.bash_history
    /usr/bin/keychain -q --host control /homefarm/.ssh/id_farmer >> /dev/null 2>&1
    source /root/.keychain/control-sh >> /dev/null 2>&1
}


################################################################################

# find out where we're supposed to be, and move there. if /homefarm
# exists then we're inside a container and we should be there. if not,
# we should be inside the homefarm git repo
if [[ -d /homefarm ]]; then
    cd /homefarm
else
    gitdir=$(cat ~/.homefarmdir)
    cd "${gitdir}"
fi

# source common functions
source ./bin/common.sh

# parse the fpconfig file. it'll be at ./.fpconfig.json if we've done
# `farmctl init` and in the files directory otherwise
if [[ -e ./.fpconfig.json ]]; then
    fp_parseconfig ./.fpconfig.json homefarm
else
    fp_parseconfig ./files/fp_hf_config.json homefarm
fi

# set version
VERSION=$(git tag | tail -1)



case "${1}" in
    init)
        hf_init
        ;;
    attach)
        hf_docker_test
        docker attach farmcontrol
        ;;
    backup)
        exec ./bin/backup
        ;;
    boinc-config)
        for arch in ${FP_CONFIG[marches]}; do
            if [[ "${arch}" == "armv7h" ]]; then
                arch="armv7l"
            fi
            # needs '|| true' to guard against failures due to unreachable machines
            /bin/ansible-playbook --extra-vars "hfarch=${arch}" nodes-boinc-setup.yml || true
        done
        ;;
    build-image)
        hf_docker_test
        docker image rm farmcontrol || true
        docker image prune -f
        docker image pull archlinux
        docker image prune -f
        cd ./files/docker/controller
        docker build --tag farmcontrol .
        ;;
    cmd)
        shift
        exec ./bin/utils/farmcmd "${@}"
        ;;
    on-up)
        # this case runs on the second invocation of farmctl, after
        # the container has been started by 'farmctl up'. it
        # initializes the environment and then execs bash in place of
        # this scipt
        # figure out our IP and print a welcome message
        localip=$(awk 'END{print $1}' /etc/hosts)
        echo
        echo "Welcome to homefarm ${VERSION}"
        echo "    Container IP is ${localip}"
        echo "    Installer httpd is listening on DOCKERHOST:9099"
        echo "    Run 'farmctl' to see options, or refer to the docs"
        echo
        # set up transient files/links
        hf_envinit
        # generate a hostsfile
        hf_buildhosts
        # start the httpd
        /usr/bin/darkhttpd "${FP_CONFIG[httpdir]}" --port 80 --daemon >> /dev/null
        # start gwgather
        if [[ -e ./bin/gwgather ]]; then
            ./bin/gwgather -config=./gwgather-config.json &
        fi
        # add /homefarm/bin to PATH and launch a shell for the user
        exec env PATH="${PATH}:/homefarm/bin" /bin/bash
        ;;
    project-sync)
        exec /bin/ansible-playbook nodes-sync-projects.yml
        ;;
    query)
        shift
        if [[ "${*}" =~ "-j" ]]; then
            nodes=( nodes/node*yml )
            echo -n '['
            i=0
            for node in "${nodes[@]}"; do
                node=$(basename "${node}" ".yml")
                echo -n "$(ssh farmer@${node} sudo PYTHONPATH='/usr/local/lib:files' query -p ${*} || true)"
                if [[ "${i}" -lt "$((${#nodes[@]}-1))" ]]; then
                    echo -n ', '
                fi
                i=$((i+1))
            done
            echo ']'
        else
            for node in nodes/node*yml; do
                node=$(basename "${node}" ".yml")
                ssh "farmer@${node}" "sudo PYTHONPATH='/usr/local/lib:files' query -p ${*}" || true
            done
        fi
        ;;
    restore)
        if [[ "${2}" == "" ]]; then
            echo "restore: homefarm directory must be specified"
        fi
        cd "${2}"
        source ./bin/common.sh
        exec docker run --rm -p 9099:80 -v "${2}:/homefarm" -it control ./bin/backup restore
        ;;
    status)
        shift
        tmpfile=$(mktemp)
        if [[ "${*}" =~ "nopage" ]]; then
            nopage="true"
        fi
        if [[ "${*}" =~ "json" ]]; then
            json="true"
            nopage="true"
        fi
        PYTHONPATH='/usr/local/lib:files' ./bin/stats "${tmpfile}" "${*}"
        tmplines=$(wc -l "${tmpfile}" | cut -d' ' -f1)
        if [[ "${nopage}" == "true" ]]; then
            cat "${tmpfile}"
        else
            if [[ ${tmplines} -gt ${LINES} ]]; then
                less "${tmpfile}"
            else
                cat "${tmpfile}"
            fi
        fi
        rm "${tmpfile}"
        ;;
    up)
        # this case brings up the docker container, executing 'farmctl
        # on-up' as the command
        hf_docker_test
        exec docker run -name farmcontrol -d --restart always -p 9099:80 -p 11099:11099 -v "${gitdir}:/homefarm" -it farmcontrol ./bin/farmctl on-up
        ;;
    update)
        exec ./bin/update "${2}"
        ;;
    version)
        echo "Homefarm ${VERSION}"
        exit 0
        ;;
    *)
        if [[ "${1}" != "" && "${1}" != "help" ]]; then
            echo "error: unknown argument '${1}'"
        fi
        cat <<EOF
usage: ${0} SUBCOMMAND [ARGS]

  backup
      Create tarball with all farm-specific files

  boinc-config
      Deploy or update BOINC configuration on compute nodes

  cmd <COMMAND_LINE>
      Run a command on all nodes. COMMAND_LINE be a single argument, so use
      quotes as appropriate

  project-sync
      Sync project statuses to compute nodes

  query <PROJECT_NAME> [-t <WU_TYPE>] [-s <TIMESPAN>] [-c]
      Generate counts and runtime stats for WUs completed on a project in a
      given time. Defaults: all WUs; 24h. If -c is given, only report counts

  restore <HOMEFARM_DIR>
      Restore farm state from a tarball created by 'farmctl backup'. Tarball must
      be in HOMEFARM_DIR

  status [json] [nopage]
      Display info on current tasks. Specifying 'nopage' inhibits autopaging.
      Specifying 'json' implies 'nopage', and outputs JSON

  update
      Update Homefarm, the local repository, and OS packages on compute nodes

  version
      Display version information
EOF
esac

