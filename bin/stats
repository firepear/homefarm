#!/usr/bin/python

import hashlib
import json
import socket
import sys
import xml.etree.ElementTree as ET


def boinc_auth_conn(s, key):
    # send the initial authorization request
    s.sendall(b'<auth1/>\003')
    # get the reply, stringify it from bytes, strip the trailing
    # ETX, and turn that into a tree
    reply = ET.fromstring(s.recv(1024).decode('utf-8').strip('\003'))
    # hash the nonce contained in the reply with our password
    m = hashlib.md5()
    m.update(bytearray(reply[0].text, 'utf-8'))
    m.update(bytearray(key, 'utf-8'))
    nonce_hash = m.hexdigest()
    # then send it
    req = "<auth2><nonce_hash>" + nonce_hash + "</nonce_hash></auth2>\003"
    s.sendall(req.encode('utf-8'))
    # repeat the receive-and-decode dance. check answer.
    reply = ET.fromstring(s.recv(1024).decode('utf-8').strip('\003'))
    if reply[0].tag == "authorized":
        return True
    else:
        return False



hosts = {}
with open("/homefarm/.boincguikeys.json", 'r') as f:
    hosts = json.load(f)

for host, key in hosts.items():
    print(host, key)
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.connect((host, 31416))
        # try to auth
        authed = boinc_auth_conn(s, key)
        if not authed:
            print("could not auth; exiting")
            sys.exit(1)

        # ok; let's get some data
        req = "<boinc_gui_rpc_request><get_results/></boinc_gui_rpc_request>\003"
        s.sendall(req.encode('utf-8'))
        reply = s.recv(2097152).decode('utf-8').strip('\003')
        print(reply)
